USE master 

CREATE DATABASE СистемаУчетаПризывников

GO

USE СистемаУчетаПризывников

GO

-- Пользовательские типы:
CREATE TYPE PHONE FROM NVARCHAR(12);
GO
CREATE TYPE PASSPORT FROM NVARCHAR(10);
GO
CREATE TYPE DEGOFSUITAB FROM NVARCHAR(2) NOT NULL;
GO

-- Таблица [Военкомат]:
CREATE TABLE [Военкомат]
(
	Код INT PRIMARY KEY,
	Наименование NVARCHAR(100) NOT NULL,
	Адрес NVARCHAR(200) NOT NULL,
	Телефон PHONE,
)
GO

-- Таблица [Специальное учреждение]:
CREATE TABLE [Специальное учреждение]
(
	Код INT PRIMARY KEY,
	Наименование NVARCHAR(100) NOT NULL,
	Адрес NVARCHAR(200),
	Телефон PHONE,
)
GO

-- Таблица [Медкомитет]:
CREATE TABLE [Медкомитет]
(
	Код INT PRIMARY KEY,
	[Дата основания] DATETIME2,
	Описание NVARCHAR(50)
)
GO

-- Таблица [Профессиональный отбор]:
CREATE TABLE [Профессиональный отбор]
(
	Группа INT PRIMARY KEY,
	Описание NVARCHAR(100),
)
GO

-- Таблица [Отсрочка]:
CREATE TABLE [Отсрочка]
(
	Код INT PRIMARY KEY,
	Срок INT NOT NULL,
	Описание NVARCHAR(50)
)

GO

-- Таблица [Сотрудник]:
CREATE TABLE [Сотрудник]
(
	ФИО NVARCHAR(100) PRIMARY KEY,
	Военкомат INT NOT NULL,
	Должность NVARCHAR(30), 
	Стаж INT, 
	[Номер Паспорта] PASSPORT
)
 
GO

-- Таблица [Призывник]:
CREATE TABLE [Призывник] 
(
	[Личное Дело] INT PRIMARY KEY,
	ФИО NVARCHAR(100) NOT NULL,
	Военкомат INT NOT NULL,
	[Группа Профотбора] INT NOT NULL, 
	Телефон PHONE, 
	[Год Рождения] INT,
	Адрес NVARCHAR(200),
)

GO

-- Таблица [Специальная подготовка]:
CREATE TABLE [Специальная подготовка]
(
	Наименование NVARCHAR(100) PRIMARY KEY,
	[Код учреждения] INT NOT NULL,
)

GO

-- Таблица [Состав Медкомиссии]:
CREATE TABLE [Состав Медкомиссии]
(
	Сотрудник NVARCHAR(100) PRIMARY KEY,
	Медкомитет INT NOT NULL,

)

GO

-- Таблица [Отсрочка призывника]:
CREATE TABLE [Отсрочка призывника]
(
	Призывник INT PRIMARY KEY,
	Отсрочка INT NOT NULL,
	[Дата Выдачи] DATETIME2
)

GO

-- Таблица [Направление на специальную подготовку]:
CREATE TABLE [Направление на специальную подготовку]
(
	Призывник INT PRIMARY KEY,
	[Наименование специальной подготовки] NVARCHAR(100) NOT NULL,
)


GO

-- Таблица [Заключение врачебной комиссии]:
CREATE TABLE [Заключение врачебной комиссии]
(
	Призывник INT NOT NULL,
	[Дата Проведения] DATETIME2 NOT NULL,
	Медкомитет INT NOT NULL,
	[Степень годности] DEGOFSUITAB,

)
GO

-- Ограничения на уникальность:
ALTER TABLE Военкомат ADD CONSTRAINT Военкомат_unique UNIQUE (Телефон, Наименование)
ALTER TABLE [Специальное учреждение] ADD CONSTRAINT СпециальноеУчреждение_unique UNIQUE (Телефон, Наименование)
ALTER TABLE [Профессиональный отбор] ADD CONSTRAINT [ПрофессиональныйОтбор_unique] UNIQUE (Описание)
ALTER TABLE [Сотрудник] ADD CONSTRAINT [Сотрудник_unique] UNIQUE ([Номер Паспорта])
-- Вневшние ключи таблиц:
ALTER TABLE [Сотрудник] ADD CONSTRAINT FK_Сотрудник FOREIGN KEY (Военкомат) REFERENCES Военкомат(Код)
ALTER TABLE [Призывник] ADD CONSTRAINT FK_Призывник_Военкомат FOREIGN KEY (Военкомат) REFERENCES Военкомат(Код)
ALTER TABLE [Призывник] ADD CONSTRAINT FK_Призывник_Профотбор FOREIGN KEY ([Группа Профотбора]) REFERENCES [Профессиональный отбор](Группа)
ALTER TABLE [Специальная подготовка] ADD CONSTRAINT FK_СпециальнаяПодготовка FOREIGN KEY ([Код учреждения]) REFERENCES [Специальное учреждение](Код)
ALTER TABLE [Состав Медкомиссии] ADD CONSTRAINT FK_СоставМедкомиссии_Сотрудник FOREIGN KEY (Сотрудник) REFERENCES Сотрудник(ФИО)
ALTER TABLE [Состав Медкомиссии] ADD CONSTRAINT FK_СоставМедкомиссии_Медкомитет FOREIGN KEY (Медкомитет) REFERENCES Медкомитет(Код)
ALTER TABLE [Отсрочка призывника] ADD CONSTRAINT FK_ОтсрочкаПризывника_Призывник FOREIGN KEY (Призывник) REFERENCES Призывник([Личное Дело])
ALTER TABLE [Отсрочка призывника] ADD CONSTRAINT FK_ОтсрочкаПризывника_Отсрочка FOREIGN KEY (Отсрочка) REFERENCES Отсрочка(Код)
ALTER TABLE [Направление на специальную подготовку] ADD CONSTRAINT FK_НаправлениеНаСпециальнуюПодготовку_Призывник FOREIGN KEY (Призывник) REFERENCES Призывник([Личное Дело])
ALTER TABLE [Направление на специальную подготовку] ADD CONSTRAINT FK_НаправлениеНаСпециальнуюПодготовку_СпециальнаяПодготовка FOREIGN KEY ([Наименование специальной подготовки])
	REFERENCES [Специальная подготовка](Наименование)
ALTER TABLE [Заключение врачебной комиссии] ADD CONSTRAINT FK_РезультатВрачебнойКомиссии_Медкомитет FOREIGN KEY (Медкомитет) REFERENCES Медкомитет(Код)
ALTER TABLE [Заключение врачебной комиссии] ADD CONSTRAINT FK_РезультатВрачебнойКомиссии_Призывник FOREIGN KEY (Призывник) REFERENCES [Призывник]([Личное Дело])
-- Составной первичный ключ: 
ALTER TABLE [Заключение врачебной комиссии] ADD CONSTRAINT PK_РезультатВрачебнойКомиссии PRIMARY KEY (Призывник, [Дата Проведения])
-- Значения таблиц по умолчанию:
ALTER TABLE [Сотрудник] ADD CONSTRAINT Сотрудник_Должность_def DEFAULT 'Засекречено' FOR [Должность]
ALTER TABLE [Призывник] ADD CONSTRAINT Призывник_Адрес_def DEFAULT 'Прописка отсутствует' FOR [Адрес]
ALTER TABLE [Призывник] ADD CONSTRAINT Призывник_Телефон_def DEFAULT 'Неизвестно' FOR [Телефон]
-- Правила для таблиц:
ALTER TABLE [Заключение врачебной комиссии] ADD CONSTRAINT СтепеньГодности_ch CHECK ([Степень годности] LIKE '[АБВГ][1-4]')
ALTER TABLE [Сотрудник] ADD CONSTRAINT НомерПаспорта_ch CHECK (len([Номер Паспорта]) = 10)
ALTER TABLE [Отсрочка] ADD CONSTRAINT Срок_ch CHECK ([Срок] >=1)

GO

-- Представления

-- Результаты Последнего медосмотра
CREATE VIEW [Актуальный медосмотр] AS
	SELECT [Заключение врачебной комиссии].Призывник, MAX([Заключение врачебной комиссии].[Дата Проведения]) AS [Дата Медосмотра]
		FROM [Заключение врачебной комиссии]
			GROUP BY [Заключение врачебной комиссии].Призывник
GO 

CREATE VIEW [Результаты Последнего медосмотра] AS
	SELECT [Личное Дело] AS Призывник, ФИО, [Заключение врачебной комиссии].[Степень годности], 
		[Заключение врачебной комиссии].[Дата Проведения], [Заключение врачебной комиссии].Медкомитет
			FROM ((dbo.Призывник LEFT JOIN dbo.[Актуальный медосмотр] ON dbo.Призывник.[Личное Дело] = dbo.[Актуальный медосмотр].Призывник) 
				LEFT JOIN [Заключение врачебной комиссии] ON (dbo.[Актуальный медосмотр].Призывник = [Заключение врачебной комиссии].Призывник 
					AND dbo.[Актуальный медосмотр].[Дата Медосмотра] = dbo.[Заключение врачебной комиссии].[Дата Проведения]))
GO

-- Все о призывнике
CREATE VIEW [Все О Призывнике] AS 
	SELECT [Личное Дело], Призывник.ФИО, [Группа Профотбора], [Год Рождения], [Результаты Последнего медосмотра].[Степень годности], 
		[Отсрочка призывника].[Дата Выдачи] AS [Дата выдачи отсрочки], Отсрочка.Срок AS [Срок Отсрочки], 
			[Направление на специальную подготовку].[Наименование специальной подготовки], Военкомат.Наименование AS [Военокмат], 
				Призывник.Адрес, Призывник.Телефон
					FROM (((Призывник LEFT JOIN [Результаты Последнего медосмотра] ON Призывник.[Личное Дело] = [Результаты Последнего медосмотра].Призывник) 
					LEFT JOIN  [Направление на специальную подготовку] ON Призывник.[Личное Дело] = [Направление на специальную подготовку].Призывник) 
						JOIN Военкомат ON Призывник.Военкомат = Военкомат.Код) LEFT JOIN [Отсрочка призывника] ON Призывник.[Личное Дело] = [Отсрочка призывника].Призывник 
							LEFT JOIN Отсрочка ON [Отсрочка призывника].Отсрочка = Отсрочка.Код
GO

-- Годные к призыву
CREATE VIEW [Годные к призыву] AS
	SELECT [Личное Дело], ФИО, [Год Рождения], [Степень годности], [Группа Профотбора], [Наименование специальной подготовки], Военокмат
		FROM [Все О Призывнике]
			WHERE ([Степень годности] LIKE '[АБ]_' AND [Группа Профотбора] <= 3 AND [Дата выдачи отсрочки] IS NULL)
GO

-- Хранимые процедуры

-- Добавление призывника

/*
 0 - Призывник успешно добавлен
 1 - Военкомат не найден
 2 - Призывник с таким номером личного дела уже существует
 3 - Неправильный формат степени годности
 4 - Медкомитет не может быть пустым
 5 - Дата Медосмотра не может быть пустой
 6 - Гуппа профотбора не может быть пустой
 7 - ФИО не может быть пустым
 8 - Номер личного дела не может быть пустым
*/

CREATE PROC [Добавить Призывника]
	@ЛичноеДело INT,
	@ФИО NVARCHAR(100),
	@Военкомат INT,
	@Профотбор INT,
	@Телефон NVARCHAR(15),
	@ГодРождения INT,
	@Адрес NVARCHAR(200),
	@Медкомитет INT,
	@СтепеньГодности NVARCHAR(2),
	@ДатаМедосмотра DATETIME2
AS
DECLARE @Код int 
SET @Код = 0
	IF (@ЛичноеДело IS NOT NULL) AND (@ЛичноеДело <> '')
		IF (@ФИО IS NOT NULL) AND (@ФИО <> '')
			IF (@Профотбор IS NOT NULL) AND (@Профотбор <> '')
				IF (@ДатаМедосмотра IS NOT NULL) AND (@ДатаМедосмотра <> '')
					IF (@Медкомитет IS NOT NULL) AND (@Медкомитет <> '')
						IF @СтепеньГодности LIKE '[АБВГ][1-4]'
							IF @ЛичноеДело NOT IN (SELECT Призывник.[Личное Дело] FROM Призывник)
								IF @Военкомат IN (SELECT Военкомат.Код FROM Военкомат)
									BEGIN
										INSERT INTO Призывник VALUES (@ЛичноеДело, @ФИО, @Военкомат, @Профотбор, @Телефон, @ГодРождения, @Адрес)
										INSERT INTO [Заключение врачебной комиссии] VALUES (@ЛичноеДело, @ДатаМедосмотра, @Медкомитет, @СтепеньГодности)
									END
								ELSE SET @Код = 1
							ELSE SET @Код = 2
						ELSE SET @Код = 3
					ELSE SET @Код = 4
				ELSE SET @Код = 5
			ELSE SET @Код = 6
		ELSE SET @Код = 7
	ELSE SET @Код = 8
RETURN @Код

GO

-- Добавить сотрудника

/*
 0 - Сотрудник успешно добавлен
 1 - Военкомат не найден
 2 - Стаж не может быть пустым
 3 - Должность не может быть пустой
 4 - ФИО не может быть пустым
*/

CREATE PROC [Добавить сотрудника]
	@ФИО NVARCHAR(100),
	@Военкомат INT,
	@Должность NVARCHAR(30),
	@Стаж int,
	@НомерПаспорта PASSPORT

AS
DECLARE @Код int 
SET @Код = 0
		IF (@ФИО IS NOT NULL) AND (@ФИО <> '')
			IF (@Должность IS NOT NULL) AND (@Должность <> '')
				IF (@Стаж IS NOT NULL) AND (@Стаж <> '')
					IF @Военкомат IN (SELECT Военкомат.Код FROM Военкомат)
						BEGIN
							INSERT INTO Сотрудник VALUES (@ФИО, @Военкомат, @Должность, @Стаж, @НомерПаспорта)
						END
					ELSE SET @Код = 1
				ELSE SET @Код = 2
			ELSE SET @Код = 3
		ELSE SET @Код = 4
RETURN @Код

GO

-- Добавить сотрудника в состав медкомисии

/*
 0 - Сотрудник успешно добавлен в состав медкомисии
 1 - Сотрудника не существует
 2 - Медкомитета не существует
*/

CREATE PROC [Добавить сотрудника в состав медкомисии]
	@Сотрудник NVARCHAR(100),
	@Медкомитет INT

AS
DECLARE @Код int 
SET @Код = 0
	IF @Сотрудник IN (SELECT Сотрудник.ФИО FROM Сотрудник)
		IF @Медкомитет IN (SELECT Медкомитет.Код FROM Медкомитет)
			BEGIN
				INSERT INTO [Состав Медкомиссии] VALUES (@Сотрудник, @Медкомитет)
			END
		ELSE SET @Код = 1
	ELSE SET @Код = 2
RETURN @Код

GO

-- Добавление отсрочки призывнику

/*
 0 - Отсрочка успешно добавлена призывнику
 1 - Призывник уже имеет отсрочку
 2 - Не найден тип отсрочки
 3 - Призывник не найден
*/

CREATE PROC [Добавить Призывнику Отсрочку]
	@ЛичноеДело INT,
	@Отсрочка INT,
	@ДатаВыдачи DATETIME2
AS
	DECLARE @Код int
	SET @Код = 0

	IF @ЛичноеДело IN (SELECT Призывник.[Личное Дело] FROM Призывник) 
		IF @Отсрочка IN (SELECT Отсрочка.Код FROM Отсрочка) 
			IF @ЛичноеДело NOT IN (SELECT [Отсрочка призывника].Призывник FROM [Отсрочка призывника])
				BEGIN 
					INSERT INTO [Отсрочка призывника] 
					VALUES (@ЛичноеДело, @Отсрочка, @ДатаВыдачи)
				END
			ELSE SET @Код = 1
		ELSE SET @Код = 2
	ELSE SET @Код = 3
RETURN @Код

GO 

-- Обновление медкомитета сотруднику, состоящему в медкомисии

/*
 0 - Сотруднику успешно обновлен медкомитет
 1 - Сотрудника не состоит в медкомитете
*/

CREATE PROC [Обновить медкомитет сотруднику]
	@Сотрудник NVARCHAR(100),
	@Медкомитет INT

	AS

	DECLARE @Код int 
	SET @Код = 0

		IF @Сотрудник IN (SELECT [Состав Медкомиссии].Сотрудник FROM [Состав Медкомиссии])
			BEGIN
				UPDATE [Состав Медкомиссии] 
					SET Медкомитет = @Медкомитет
						WHERE Сотрудник = @Сотрудник
			END
		ELSE SET @Код = 1
RETURN @Код

GO

-- Обновление должности сотруднику

/*
 0 - Сотруднику успешно обновлена должность
 1 - Сотрудника не существует
*/

CREATE PROC [Обновить должность сотруднику]
	@Сотрудник NVARCHAR(100),
	@Должность NVARCHAR(30)

	AS

	DECLARE @Код int 
	SET @Код = 0

		IF @Сотрудник IN (SELECT Сотрудник.ФИО FROM [Сотрудник])
			BEGIN
				UPDATE Сотрудник 
					SET Должность = @Должность
						WHERE ФИО = @Сотрудник
			END
		ELSE SET @Код = 1
RETURN @Код

GO

-- Обновление отсрочки призывнику

/*
 0 - Отсрочка успешно обновлена у призывника
 1 - Призывник не имеет отсрочки
 2 - Не найден тип отсрочки
 3 - Призывник не найден
*/

CREATE PROC [Обновить Призывнику Отсрочку]
	@ЛичноеДело INT,
	@Отсрочка INT,
	@ДатаВыдачи DATETIME2
AS
	DECLARE @Код int
	SET @Код = 0

	IF @ЛичноеДело IN (SELECT Призывник.[Личное Дело] FROM Призывник) 
		IF @Отсрочка IN (SELECT Отсрочка.Код FROM Отсрочка) 
			IF @ЛичноеДело IN (SELECT [Отсрочка призывника].Призывник FROM [Отсрочка призывника])
				BEGIN 
					UPDATE [Отсрочка призывника] 
					SET Отсрочка = @Отсрочка, [Дата Выдачи] = @ДатаВыдачи
					WHERE Призывник = @ЛичноеДело
				END
			ELSE SET @Код = 1
		ELSE SET @Код = 2
	ELSE SET @Код = 3
RETURN @Код

GO 

-- Удаление отсрочки у призывника

/*
 0 - Отсрочка успешно обновлена у призывника
 1 - Призывник не имеет отсрочки
 2 - Призывник не найден
*/


CREATE PROC [Удалить Призывнику Отсрочку]
	@ЛичноеДело INT
AS
	DECLARE @Код int
	SET @Код = 0

	IF @ЛичноеДело IN (SELECT Призывник.[Личное Дело] FROM Призывник) 
		IF @ЛичноеДело IN (SELECT [Отсрочка призывника].Призывник FROM [Отсрочка призывника])
			BEGIN 
				DELETE [Отсрочка призывника] WHERE Призывник = @ЛичноеДело
			END
		ELSE SET @Код = 1
	ELSE SET @Код = 2
RETURN @Код

GO

-- Удаление сотрудника

/*
 0 - Сотрудник успешно удален
 1 - Сотрудник не найден
*/

CREATE PROC [Удалить Сотрудника]
	@Сотрудник NVARCHAR(100)
AS
	DECLARE @Код int
	SET @Код = 0

		IF @Сотрудник IN (SELECT [Сотрудник].ФИО FROM Сотрудник)
			BEGIN 
				DELETE [Сотрудник] WHERE ФИО = @Сотрудник
			END
		ELSE SET @Код = 1
RETURN @Код

GO 

-- Удаление сотрудника из состава медкомисии

/*
 0 - Сотрудник успешно удален
 1 - Сотрудник не состоит в медкомисии
*/

CREATE PROC [Удалить Сотрудника из Медкомисии]
	@Сотрудник NVARCHAR(100)
AS
	DECLARE @Код int
	SET @Код = 0

		IF @Сотрудник IN (SELECT [Состав Медкомиссии].Сотрудник FROM [Состав Медкомиссии])
			BEGIN 
				DELETE [Состав Медкомиссии] WHERE Сотрудник = @Сотрудник
			END
		ELSE SET @Код = 1
RETURN @Код

GO

-- Триггеры

-- Стаж сотрудника

CREATE TRIGGER [ТриггерСтаж] ON Сотрудник INSTEAD OF UPDATE 
	AS
		UPDATE Сотрудник
			SET Стаж = inserted.Стаж
				FROM Сотрудник JOIN inserted ON Сотрудник.ФИО = inserted.ФИО
					WHERE inserted.Стаж > Сотрудник.Стаж


